cmake_minimum_required(VERSION 3.5.0)

project(lofarbeam)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMake)

set(CASACORE_MAKE_REQUIRED_EXTERNALS_OPTIONAL TRUE)
find_package(Casacore REQUIRED COMPONENTS casa ms tables measures)
include_directories(${CASACORE_INCLUDE_DIR})

add_compile_options(-std=c++11 -Wall -DNDEBUG -Wl,--no-undefined)

option (BUILD_PYTHON "Build the python bindings" YES)

add_library(stationresponse SHARED
  AntennaField.cc
  AntennaFieldHBA.cc
  AntennaFieldLBA.cc
  AntennaModelHBA.cc
  AntennaModelLBA.cc
  DualDipoleAntenna.cc
  ElementResponse.cc
  ITRFConverter.cc
  ITRFDirection.cc
  LofarMetaDataUtil.cc
  MathUtil.cc
  Station.cc
  TileAntenna.cc
  Types.cc)

add_library(elementresponse SHARED
  ElementResponse.cc)

set_target_properties(stationresponse PROPERTIES VERSION 3)
set_target_properties(elementresponse PROPERTIES VERSION 3)

# The elementresponse lib does not require casacore, so
# linking casacore only to stationresponse is enough.
target_link_libraries(stationresponse ${CASACORE_LIBRARIES})

install (TARGETS stationresponse DESTINATION lib)
install (TARGETS elementresponse DESTINATION lib)

install (FILES
  AntennaField.h
  Constants.h
  LofarMetaDataUtil.h
  Station.h
  Types.h
  ITRFConverter.h
  ITRFDirection.h
DESTINATION include/StationResponse)

install (FILES
  ElementResponse.h
DESTINATION include/ElementResponse)

find_package(Doxygen)

if(DOXYGEN_FOUND)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
add_custom_target(doc
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating developer API documentation with Doxygen" VERBATIM)
elseif(DOXYGEN_FOUND)

endif(DOXYGEN_FOUND)

if (BUILD_PYTHON)
  # This is NOT the modern cmake-included FindPython!
  find_package (Python COMPONENTS Development)

  message("Compiling Python ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR} support. If this is not the intended target use 'DPYTHON_EXECUTABLE' to control.")
  # bind against boost-python for compilation of the python API
  # depending on major release version of the python libraries
  if(${PYTHON_VERSION_MAJOR} VERSION_LESS "3")
    set(casapy "")
    set(oldboostpy "")
  else()
    set(casapy "3")
    set(oldboostpy "3")
  endif()
  set(boostpy ${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
  message(STATUS "Trying to find boost-python libraries with version suffix ${boostpy}")
  find_package(Boost 1.67.0 COMPONENTS python${boostpy} numpy${boostpy})
  if(NOT Boost_FOUND)
    message(STATUS "Falling back to old Boost search.")
    set(boostpy ${oldboostpy})
    find_package(Boost REQUIRED COMPONENTS python${boostpy} numpy${boostpy})
  endif()
  find_package (Casacore REQUIRED COMPONENTS python${casapy})
  set(casapylib ${CASA_PYTHON${casapy}_LIBRARY})

  message(STATUS "Boost python library: ${Boost_PYTHON_LIBRARY}")
  message(STATUS "Boost numpy library: ${Boost_NUMPY_LIBRARY}")
  message(STATUS "Python library ${Python_LIBRARIES}")

  add_library(_stationresponse MODULE pystationresponse.cc)
  set_target_properties(_stationresponse PROPERTIES PREFIX "")
  target_include_directories(_stationresponse PRIVATE ${PYTHON_INCLUDE_DIR} ${Boost_INCLUDE_DIRS})
  target_link_libraries(_stationresponse stationresponse ${casapylib} Boost::python${boostpy} Boost::numpy${boostpy} ${PYTHON_LIBRARIES})
  install(TARGETS _stationresponse DESTINATION ${PYTHON_INSTALL_DIR}/lofar/stationresponse)
  install(FILES __init__.py DESTINATION ${PYTHON_INSTALL_DIR}/lofar/stationresponse)
endif(BUILD_PYTHON)
